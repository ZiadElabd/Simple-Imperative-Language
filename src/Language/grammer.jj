PARSER_BEGIN(Grammer)
package Language;

import java.io.StringReader;

public class Grammer {
  
    public static void main(String[] args) throws Exception {
      StringReader in=new StringReader("count 10");
      Grammer grammer=new Grammer(System.in);
      Grammer.parse();
    }
    
}

PARSER_END(Grammer)

SKIP : {
	  " "
	| "\t"
	| "\n"
	| "\r"
}

TOKEN : /* punctuation */
{
    < LPAREN: "(" >
    |
    < RPAREN: ")" >
    |
    < SEMICOLON: ";" >
}

TOKEN : /* keywords */
{
    < IF: "if" >
    |
    < THEN: "then" >
    |
    < ELSE: "else" >
    |
    < WHILE: "while" >
    |
    < DO: "do" >
}

TOKEN : /* identifiers */
{
    < LETTER: [ "a"-"f"] >
    |
    < DIGIT: [ "0"-"9" ] >
}


TOKEN : /* operators */
{
    < PLUS: "+" >
    |
    < MINUS: "-" >
    |
    < COMPARE: "==" >
    |
    < NOT: "!" >
  	|
  	< EQUAL: "=" >
 	|
 	< ASSIGHN: ":">
 	|
 	< AND: "^"> 
}

void parse():
{
	Num() <EOF>
}

command():
{
	command() (< SEMICOLON > command())*
	 
}

Num():
{
	< DIGIT > (Num())*
}
Var():
{
	<LETTER> (Var())*
}
//AExp  →  Num | Var | (AExp + AExp) | (AExp −AExp)
AEXp(): {
   Num()
  | 
   Var()
  |
  <LPAREN> (AEXp() < PLUS> AEXp())  < RPAREN>
  |
  <LPAREN> (AEXp() < MINUS> AEXp()) <RPAREN> 
 }
//BExp  →  tt | ff | (AExp == AExp) | ! BExp | (BExp ^ BExp)
BExp():
{
  "tt"
  | 
  "ff"
  |
   <LPAREN> (AEXp() < COMPARE> AEXp())  < RPAREN>
  |
   <LPAREN> (AEXp() <AND> AEXp())  < RPAREN>
  |
  
  <NOT> BExp()
}
