PARSER_BEGIN(Grammer)
package Language;

import java.io.BufferedReader;
import java.io.FileReader;

public class Grammer {
  
    public static void main(String[] args) throws Exception {
      BufferedReader in = new BufferedReader(new FileReader("read.txt"));
      Grammer grammer=new Grammer(in);
      grammer.parse();
    }
    public static boolean check(BufferedReader reader) throws ParseException{
        //try {
          new Grammer(reader);
          Grammer.parse();
          
       /* }catch(Exception e) {
          return false;

        }*/
     return true;
    }
    
}

PARSER_END(Grammer)

SKIP : {
	  " "
	| "\t"
	| "\n"
	| "\r"
}

TOKEN : /* punctuation */
{
    < LPAREN: "(" >
    |
    < RPAREN: ")" >
    |
    < SEMICOLON: ";" >
}

TOKEN : /* keywords */
{
    < IF: "if" >
    |
    < THEN: "then" >
    |
    < ELSE: "else" >
    |
    < WHILE: "while" >
    |
    < DO: "do" >
    |
    < SKI:"skip" > 
}

TOKEN : /* identifiers */
{
  	< TF :"ff" | "tt">
 	| 
    <LETTER: (["a"-"f"])+ >
    |
    <DIGIT: (["0"-"9"])+ > 
}


TOKEN : /* operators */
{
    < PLUS: "+" >
    |
    < MINUS: "-" >
    |
    < COMPARE: "==" >
    |
    < NOT: "!" >
  	|
  	< EQUAL: "=" >
 	|
 	< ASSIGHN: ":=">
 	|
 	< AND: "^"> 
}

void parse():
{}
{
  	{ System.out.println("presed");}
	Statement()  <EOF> 
	{ System.out.println("parsed correctly");}	  
}

void Statement():
{}
{
 command() (<SEMICOLON>  command())*
  
} 
void command():
{}
{
   < SKI > skip()
   |
   VAR() <ASSIGHN> AEXp()
   |
   <IF>  IfStatement()
   |
   <WHILE> WhileStatement()
}

void skip():
{}
{
 { return; }
}
void NUM():
{}
{
	<DIGIT> [NUM()]
}



void VAR():
{}
{
	<LETTER >[VAR()] 
}



void AEXp():
{}
{
   NUM() 
  | 
   VAR() 
  |
  <LPAREN> (AEXp() sign() AEXp())+  < RPAREN>
  | 
  < SEMICOLON>  command()
 }
 void sign(): { }
 {
   < PLUS>
 |
  < MINUS>
 |
 < COMPARE>
 |
 <AND>
 }



void BExp(): { }
{
  < TF >
  | 
  <LPAREN> select()  < RPAREN>
  | 
  <NOT> BExp()
}


void select(): { }
{
  AEXp() < COMPARE> AEXp()
 |
  BExp() <AND> BExp()
}

void IfStatement() :
{}
{
     BExp() <THEN> command()  <ELSE> command()
   |
   < SEMICOLON>  command()
}

void WhileStatement() :
{}
{
     BExp() <DO> command()
}

