PARSER_BEGIN(Grammer)
package Language;

import java.io.BufferedReader;
import java.io.FileReader;

public class Grammer {
  
    public static void main(String[] args) throws Exception {
      BufferedReader in = new BufferedReader(new FileReader("read.txt"));
      Grammer grammer=new Grammer(in);
      Grammer.parse();
    }
    
}

PARSER_END(Grammer)

SKIP : {
	  " "
	| "\t"
	| "\n"
	| "\r"
}

TOKEN : /* punctuation */
{
    < LPAREN: "(" >
    |
    < RPAREN: ")" >
    |
    < SEMICOLON: ";" >
}

TOKEN : /* keywords */
{
    < IF: "if" >
    |
    < THEN: "then" >
    |
    < ELSE: "else" >
    |
    < WHILE: "while" >
    |
    < DO: "do" >
}

TOKEN : /* identifiers */
{
    <LETTER: (["a"-"f"])+ >
    |
    <DIGIT: (["0"-"9"])+ > 
  	|
  	< TF: "tt" | "ff" > 
}


TOKEN : /* operators */
{
    < PLUS: "+" >
    |
    < MINUS: "-" >
    |
    < COMPARE: "==" >
    |
    < NOT: "!" >
  	|
  	< EQUAL: "=" >
 	|
 	< ASSIGHN: ":">
 	|
 	< AND: "^"> 
}

void parse():
{}
{
  	{ System.out.println("presed");}
	command()
	{ System.out.println("parsed correctly");}
}

void command():
{}
{
   "SKIP" skip()
   |
    [< SEMICOLON > command()]
   |
   VAR() <ASSIGHN> <EQUAL>AEXp() 
}

void skip():
{}
{
 { return; }
}
void NUM():
{}
{
	<DIGIT> [NUM()]
}



void VAR():
{}
{
	<LETTER >[VAR()] 
}



void AEXp():
{}
{
   NUM() 
  | 
   VAR() 
  |
  <LPAREN> (AEXp() sign() AEXp())+  < RPAREN>
  
 }
 void sign(): { }
 {
   < PLUS>
 |
  < MINUS>
 |
 < COMPARE>
 |
 <AND>
 }



void BExp(): { }
{
  < TF >
  |
   <LPAREN> select()  < RPAREN>
  | 
  <NOT> BExp()
}


void select(): { }
{
  AEXp() < COMPARE> AEXp()
 |
  BExp() <AND> BExp()
}
